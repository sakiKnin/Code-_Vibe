/*
 * This file is generated by jOOQ.
 */
package br.com.giulianabezerra.springbootjooq.public_.tables;


import br.com.giulianabezerra.springbootjooq.public_.Keys;
import br.com.giulianabezerra.springbootjooq.public_.Public;
import br.com.giulianabezerra.springbootjooq.public_.tables.records.CarAdvertRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarAdvert extends TableImpl<CarAdvertRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_advert</code>
     */
    public static final CarAdvert CAR_ADVERT = new CarAdvert();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarAdvertRecord> getRecordType() {
        return CarAdvertRecord.class;
    }

    /**
     * The column <code>public.car_advert.id</code>.
     */
    public final TableField<CarAdvertRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car_advert.title</code>.
     */
    public final TableField<CarAdvertRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.car_advert.fuel_type</code>.
     */
    public final TableField<CarAdvertRecord, String> FUEL_TYPE = createField(DSL.name("fuel_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.car_advert.price</code>.
     */
    public final TableField<CarAdvertRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.car_advert.is_new</code>.
     */
    public final TableField<CarAdvertRecord, Boolean> IS_NEW = createField(DSL.name("is_new"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.car_advert.mileage</code>.
     */
    public final TableField<CarAdvertRecord, Integer> MILEAGE = createField(DSL.name("mileage"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.car_advert.first_registration</code>.
     */
    public final TableField<CarAdvertRecord, LocalDateTime> FIRST_REGISTRATION = createField(DSL.name("first_registration"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.car_advert.crated_at</code>.
     */
    public final TableField<CarAdvertRecord, LocalDateTime> CRATED_AT = createField(DSL.name("crated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.car_advert.updated_at</code>.
     */
    public final TableField<CarAdvertRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CarAdvert(Name alias, Table<CarAdvertRecord> aliased) {
        this(alias, aliased, null);
    }

    private CarAdvert(Name alias, Table<CarAdvertRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.car_advert</code> table reference
     */
    public CarAdvert(String alias) {
        this(DSL.name(alias), CAR_ADVERT);
    }

    /**
     * Create an aliased <code>public.car_advert</code> table reference
     */
    public CarAdvert(Name alias) {
        this(alias, CAR_ADVERT);
    }

    /**
     * Create a <code>public.car_advert</code> table reference
     */
    public CarAdvert() {
        this(DSL.name("car_advert"), null);
    }

    public <O extends Record> CarAdvert(Table<O> child, ForeignKey<O, CarAdvertRecord> key) {
        super(child, key, CAR_ADVERT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CarAdvertRecord, Long> getIdentity() {
        return (Identity<CarAdvertRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarAdvertRecord> getPrimaryKey() {
        return Keys.CAR_ADVERT_PKEY;
    }

    @Override
    public CarAdvert as(String alias) {
        return new CarAdvert(DSL.name(alias), this);
    }

    @Override
    public CarAdvert as(Name alias) {
        return new CarAdvert(alias, this);
    }

    @Override
    public CarAdvert as(Table<?> alias) {
        return new CarAdvert(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarAdvert rename(String name) {
        return new CarAdvert(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarAdvert rename(Name name) {
        return new CarAdvert(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarAdvert rename(Table<?> name) {
        return new CarAdvert(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Double, Boolean, Integer, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super Double, ? super Boolean, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super Double, ? super Boolean, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
